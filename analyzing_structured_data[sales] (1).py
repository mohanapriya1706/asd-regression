# -*- coding: utf-8 -*-
"""Analyzing Structured Data[sales].ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yqie_pCaMU7CIwQmeaIIMsIh02pEaTjW
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/product and sales.csv')
display(df.head(5))
print(df.shape)

df.info()

df.describe()

df.isnull().sum()

#transformation
df['Date']=pd.to_datetime(df['Date'])
df.head()

print(df['Store'].unique())

df["Day"]= pd.DatetimeIndex(df['Date']).day
df['Month'] = pd.DatetimeIndex(df['Date']).month
df['Year'] = pd.DatetimeIndex(df['Date']).year

df.columns

#Visualization

total_sales= df.groupby('Store')['Weekly_Sales'].sum().sort_values() 
plt.title('Total sales for each store')
plt.xticks(rotation=0)
plt.xlabel('Store')
plt.ylabel('Total Sales')
total_sales.plot(kind='bar')

plt.bar(df["Month"],df["Weekly_Sales"])
plt.xlabel("Months")
plt.ylabel("Weekly Sales")
plt.title("Monthly view of sales")
plt.show()

df['Year'].unique()

plt.bar(df["Year"],df["Weekly_Sales"])
plt.xlabel("years")
plt.ylabel("Weekly Sales")
plt.title("Yearly view of sales")
plt.show()

sns.pairplot(df)

#histogream
plt.hist(df.Weekly_Sales,color='Red')

sns.boxplot(data=df,y='Temperature')

sns.boxplot(data=df,y='Fuel_Price')

sns.boxplot(data=df,y='CPI')

sns.boxplot(data=df,y='Unemployment')

df_clean = df[(df['Unemployment']<10) & (df['Unemployment']>4.5) & (df['Temperature']>10)]
df_clean

#regression using tensorflow

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers



train_df=df_clean.sample(frac=0.8,random_state=0)
test_df=df_clean.drop(train_df.index)
print('training data:')
display(train_df.head(2))
print('training data:')
display(test_df.head(2))
print('\n')

train_stat=train_df.describe()
print('\n')
print('Description about price attribute of a train_df:')
display(train_stat.pop('Weekly_Sales'))
train_lables=train_df.pop('Weekly_Sales')
test_labels=test_df.pop('Weekly_Sales')
print('\n')
print('View test labels:')
display(test_labels)

model=tf.keras.Sequential()
model.add(tf.keras.layers.Dense(1,input_shape=[1]))
model.compile(loss='mse',optimizer=tf.keras.optimizers.Adam(0.01))
print('Summary of a model:')
display(model.summary())

history=model.fit(df_clean['Temperature'],df_clean['Weekly_Sales'],epochs=100)

print('Error and epoch:')
plt.plot(history.history['loss'])
plt.xlabel('epoch')
plt.ylabel('error')
plt.title('error with respect to epochs:')

print('epoch:676/676')
df_clean['Prediction']=model.predict(df_clean['Temperature'])
plt.scatter(df_clean['Temperature'],df_clean['Weekly_Sales'])

plt.plot(df_clean['Temperature'],df_clean['Prediction'])

from sklearn.metrics import r2_score
v=r2_score(df_clean['Temperature'],df_clean['Prediction'])
print('r2score is',v)
from sklearn.metrics import mean_squared_error
sde=mean_squared_error(df_clean['Temperature'],df_clean['Prediction'])
print('mean sqarued error=',sde)



# Linear Regression using scikit tool
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.linear_model import LinearRegression
X = df[['Store','Fuel_Price','CPI','Unemployment','Day','Month','Year']]
Y = df['Weekly_Sales']
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2)
print('Linear Regression:')
print()
reg = LinearRegression()
reg.fit(X_train, Y_train)
Y_pred = reg.predict(X_test)
print('Accuracy:',reg.score(X_train, Y_train)*100)
print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, Y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(Y_test, Y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, Y_pred)))
sns.scatterplot(Y_pred, Y_test)

#regression using randomforestregressor
from sklearn.ensemble import RandomForestRegressor
print('Random Forest Regressor:')
print()
rfr = RandomForestRegressor()        
rfr.fit(X_train,Y_train)
Y_pred = rfr.predict(X_test)
print('Accuracy:',rfr.score(X_test, Y_test)*100)
print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, Y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(Y_test, Y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, Y_pred)))
sns.scatterplot(Y_pred, Y_test)